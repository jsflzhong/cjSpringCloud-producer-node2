#服务提供者-第二节点 工程.

为了测试服务注册中心eureka对服务提供者做的负载均衡,特地复制出来这个项目.
项目大多数文件都与第一个服务提供者工程一致,只不过是eureka的配置,以及测试controller中返回的串略有不同.


1.配置:

#########eureka#########
#注意,这个注册在eureka的应用名,是关键.无论同一种服务有多少节点,该名字都必须是一样的!以不同的端口区分,这样eureka才能做服务发现和负载均衡等.看node3:serviceProvider的此处,也是这个名字.
spring.application.name=spring-cloud-producer
server.port=8085
#禁用注册自己,设为false.否则启动时会报错
#但是在需要多点互相注册时,这两项需要设为true.
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
#本项目作为eureka的第一节点
#eureka.instance.hostname=peer1
#指向注册中心.
eureka.client.serviceUrl.defaultZone=http://localhost:8080/eureka/


2.启动类:

    启动类中添加@EnableDiscoveryClient注解.


3.Controller:

    @RequestMapping的url要与下面调用者的接口里面指定的相匹配!
    并且,与上面配置的应用名同理,不同的服务提供者节点之间, 只要他们是同种服务, 同Controller,同handler, 那么他们的该url,要一致! 这样eureka才能做服务发现和负载均衡等











